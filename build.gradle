plugins {
	id 'java'
	id "io.github.liplum.mgpp" version "1.3.2"
}
group 'mod-tools'
version '1.4.5'

static def export(CompileOptions options) {
// options.compilerArgs.addAll("-Xlint:deprecation")
	options.compilerArgs.addAll([
			"java.base/jdk.internal.misc",
			"java.base/jdk.internal.loader",
			"java.base/jdk.internal.reflect",
			"java.base/sun.net.www.protocol.http",
			"java.base/sun.net.www.protocol.https",
			// ---------------
			"jdk.compiler/com.sun.tools.javac.api",
			"jdk.compiler/com.sun.tools.javac.comp",
			"jdk.compiler/com.sun.tools.javac.code",
			"jdk.compiler/com.sun.tools.javac.tree",
			"jdk.compiler/com.sun.tools.javac.main",
			"jdk.compiler/com.sun.tools.javac.model",
			"jdk.compiler/com.sun.tools.javac.jvm",
			"jdk.compiler/com.sun.tools.javac.parser",
			"jdk.compiler/com.sun.tools.javac.processing",
			"jdk.compiler/com.sun.tools.javac.util",
			"jdk.compiler/com.sun.tools.javac.resources",
			"java.base/sun.reflect.annotation",
			"java.base/jdk.internal.module",
			"jdk.jfr/jdk.jfr.internal",
	].collectMany { ["--add-exports", "$it=ALL-UNNAMED"] })
//	println options.compilerArgs.join(" ")
}

allprojects {
	ext {
		uncVersion = '1.8.9'
		mindustryVersion = 'v146'

		MdtDataDir = 'E:/Users/ASUS/Desktop/Mindustry136'
		buildDir0 = layout.buildDirectory.getAsFile().get()
	}
	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
		sourceCompatibility = 9
		targetCompatibility = 9
		export(options)
	}
	repositories {
		mavenLocal()
		maven { url 'https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository' }
		mavenCentral()
		maven { url 'https://www.jitpack.io' }
	}
}

tasks.withType(JavaCompile) {
	sourceCompatibility = 17
	targetCompatibility = 17
}

sourceSets.main.java.srcDirs = ["src"]

//force arc version
configurations.configureEach {
	resolutionStrategy.eachDependency { details ->
		if (details.requested.group == 'com.github.Anuken.Arc') {
			details.useVersion "$mindustryVersion"
		}
	}
}

dependencies {
	compileOnly project(":annotations")
	annotationProcessor project(":compiler")

//	def sdkRoot = System.getenv("ANDROID_HOME")
//	println "AndroidHome: $sdkRoot"
//	def platformRoot = new File("$sdkRoot/platforms").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }
	if (new File("${MdtDataDir}/Mindustry_desktop.jar").exists())
		compileOnly files("${MdtDataDir}/Mindustry_desktop.jar")
	compileOnly files(
			"_libs/Mindustry_android.jar",
//			"$platformRoot/android.jar",
			"assets/libs/reflect-core.jar",
			"trash/procyon-0.6.jar",
			"_libs/Android_dalvik-1.0.jar",
	)
	implementation files(
			"_libs/AndroidField.jar",
	)
	compileOnly("com.github.Anuken.Mindustry:core:$mindustryVersion") {
		exclude module: "flabel"
	}
	compileOnly("com.github.Anuken.Arc:arc-core:$mindustryVersion")
}

mindustry {
	meta << ModMeta(hidden: true)
	def name = meta.displayName = "mod-tools"
	deploy { baseName = name }
	dexJar { options.minApi = '34' }
}
mindustryAssets {
	// Set the assets root
	rootAt "$projectDir/assets"
}

task playGame(type: JavaExec) {
	dependsOn classes
	dependsOn jar

	println "buildDir: $buildDir0; version: $version"
	doFirst {
		copy {
			from "$buildDir0/libs"
			into "${MdtDataDir}/mods"
			include "$archivesBaseName-${version}.jar"
			rename { oldName -> "$project.group-${version}.jar" }
		}
	}
	//运行游戏目录
	classpath(MdtDataDir + "/Mindustry.jar")
	args = [
//	        '-testMobile'
	]
	jvmArgs = [
			'-XX:+UseParallelGC',
//			'-DsocksProxyHost=127.0.0.1',
//			'-DsocksProxyPort=1080',
//			'-DsocksNonProxyHosts="localhost|127.0.0.1"'
	]
}
tasks.register('ZCompileAll', Copy) {
	dependsOn deploy

	from("$buildDir0/tmp/deploy/") {
		include "${rootProject.name}-${version}.jar"
	}
	into("$buildDir0/libs")
	rename { fileName ->
		// a simple way is to remove the "-$version" from the jar filename
		// but you can customize the filename replacement rule as you wish.
		fileName.replace("136-$version", "").replace("-$version", "")
	}
}

tasks.register('mergeLibs', Jar) {
	def libName = "reflect-core"
	archiveFileName = "$rootDir/assets/libs/${libName}.jar"

	def libProject = "$rootDir/../localLib/$libName"
	def libsDir = new File("$libProject/build/libs")

	from(zipTree("$libsDir/$libName-desktop.jar")) {
		exclude "classes.dex"
//		exclude "mod.hjson"
		exclude "META-INF/META-INF.MF"
	}
	from(zipTree("$libsDir/$libName-dx.jar")) {
		include "**"
	}
}

tasks.register('playAndroid') {
	dependsOn deploy

	def adb = "F:/files/java/sdk/platform-tools/adb"
	def MDT_ANDROID_DIR = "/storage/emulated/0/Android/data/io.anuke.mindustry/files"

	def buildDir = buildDir0
	def fileName = "$archivesBaseName-${version}.jar"
	doLast {
		("$adb push $buildDir/tmp/deploy/$fileName $MDT_ANDROID_DIR/mods/")
				.execute().waitForProcessOutput(System.out, System.err)

		"$adb push $project.rootDir/appendLog.sh $MDT_ANDROID_DIR/appendLog.sh"
				.execute().waitForProcessOutput(System.out, System.err)
		"$adb shell am start -n io.anuke.mindustry/mindustry.android.AndroidLauncher -W -S"
				.execute().waitForProcessOutput(System.out, System.err)
		Thread.sleep(100)
		"$adb shell sh ${MDT_ANDROID_DIR}/appendLog.sh"
				.execute().waitForProcessOutput(System.out, System.err)
	}
}