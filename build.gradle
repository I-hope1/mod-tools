apply plugin: 'java'
apply plugin: 'maven-publish'

ext {
	sdkRoot = System.getenv("ANDROID_HOME")
	compilerJar = "$rootDir/_libs/compiler.jar"
}
allprojects {
	ext {
		buildDir0 = layout.buildDirectory.getAsFile().get()
	}
	tasks.withType(JavaCompile) {
		options.incremental = true
		options.encoding = 'UTF-8'
		sourceCompatibility = 21
		targetCompatibility = 21

		options.compilerArgs += "-AtargetVersion=8"
//		options.compilerArgs += "--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED"
		options.compilerArgs.add("--enable-preview")
		//	options.compilerArgs.add("-verbose")
	}
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url 'https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository' }
		maven { url 'https://jitpack.io' }
	}
}

sourceSets.main.java.srcDirs = ["src"]

//force arc version
configurations.configureEach {
	resolutionStrategy.eachDependency { details ->
		if (details.requested.group == 'com.github.Anuken.Arc') details.useVersion "$mindustryVersion"
	}
}

dependencies {
	compileOnly project(":annotations")
	annotationProcessor project(":compiler")
	compileOnly project(":testAgent")

//	println "AndroidHome: $sdkRoot"
	def platformRoot = new File("$sdkRoot/platforms").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }
	compileOnly files(
			"assets/libs/reflect-core.jar",
			"$platformRoot/android.jar",
//			"trash/procyon-0.6.jar",
			"_libs/magicClass.jar",
			"_libs/Mindustry_android.jar", // this contains android project of mindustry
			"_libs/Android_dalvik-1.0.jar",
	)
	implementation files("_libs/AndroidField.jar")

	/*annotationProcessor ("com.github.EB-wilson.JavaDynamilizer:apt:$JDERVersion")
	implementation("com.github.EB-wilson.JavaDynamilizer:annotations:$JDERVersion")
	implementation("com.github.EB-wilson.JavaDynamilizer:core:$JDERVersion")
	implementation("com.github.EB-wilson.JavaDynamilizer:baseimpl:$JDERVersion")*/
//	annotationProcessor "com.github.EB-wilson.UniverseCore:annotations:$uncVersion"
//	compileOnly "com.github.EB-wilson.UniverseCore:core:$uncVersion"


	compileOnly("com.github.anuken.mindustry:core:$mindustryVersion") {
		exclude module: "flabel"
	}
//	mindustryVersion = "v146"
	compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
	compileOnly "com.github.Anuken.Arc:backend-android:$mindustryVersion"
	compileOnly "com.github.Anuken.Arc:backend-sdl:$mindustryVersion"
//	compileOnly 'com.github.bsideup:jabel:1.0.1'
//	annotationProcessor 'com.github.bsideup:jabel:1.0.1'
//	compileOnly("com.github.Anuken.rhino::$mindustryVersion")
}

task jarAndroid(type: JavaExec) {
	dependsOn "jar"

	if (!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

	def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }
	if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

	//collect dependencies needed for desugaring
	def dependencies = (configurations.compileClasspath.asList()
//			+ configurations.runtimeClasspath.asList()
//			+ [new File(platformRoot, "android.jar")]
	).collectMany { ["--classpath", "$it.path"] }

	def d8Root = file("$sdkRoot/build-tools/").listFiles().sort().reverse().find {
		it.listFiles().any { it.name.contains("d8") } && Integer.valueOf(it.name.substring(0, 2)) >= Integer.parseInt(minApi)
	}

	classpath("$d8Root/lib/d8.jar")
	main("com.android.tools.r8.D8")
	//dex and desugar files - this requires d8 in your PATH
	args = dependencies + [
			"--min-api", "$minApi",
//			"--file-per-class",
			"--output", "$buildDir0/libs/${project.archivesBaseName}-android.jar",
			"$buildDir0/libs/${project.archivesBaseName}-${version}.jar",
	]
}


jar {
	archiveFileName = "${project.archivesBaseName}-${version}.jar"

	from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) })

	from(rootDir) { include "mod.hjson" }
	from("assets/") { include "**" }
	from(zipTree("${project(":annotations").buildDir0}/libs/annotations-${version}.jar")) {
		include "**/settings/**"
	}

	def agent = project(":testAgent")
	from("${agent.buildDir0}/libs/") { include "testAgent-${agent.version}.jar" rename { o -> "libs/hotswap-agent.jar" } }
}


task playDesktop {
	dependsOn jar

	println "buildDir: $buildDir0; version: $version"

	copy {
		from "$buildDir0/libs"
		into "${MdtDataDir}/mods"
		include "$archivesBaseName-${version}.jar"
		rename { oldName -> "$modName-${version}.jar" }
	}
}

task playGame(type: JavaExec) {
	dependsOn jar
	dependsOn playDesktop

	//运行游戏目录
	classpath(MdtDataDir + "/Mindustry.jar")
	args = [
//			'-testMobile'
//			'-debug'
	]
}

task playMultiplayer(type: JavaExec) {
	dependsOn jar

	doFirst {
		copy {
			from "$buildDir0/libs"
			into "${MdtDataDir}/mods"
			include "$archivesBaseName-${version}.jar"
			rename { oldName -> "$modName-${version}.jar" }
		}
		new Thread(() -> {
			Thread.sleep(5000)
			exec {
				commandLine "java", "-jar", MdtDataDir + "/Mindustry.jar"
			}
		}).start()
	}


	classpath(MdtDataDir + "/Mindustry.jar")

	args = [
			'-debug',
	]
}

task ZCompileAll(type: Jar) {
	dependsOn jarAndroid
	archiveFileName = "$buildDir0/libs/$modName[$version].jar"

	from(zipTree("$buildDir0/libs/$modName-${version}.jar")) { include "**" }
	from(zipTree("$buildDir0/libs/$modName-android.jar")) { include "classes.dex" }
	doLast {
		copy {
			from "$buildDir0/libs/$modName[$version].jar"
			into "$buildDir0/libs/"
			rename("\\[$version]", "-deploy")
		}
	}
}

tasks.register('mergeLibs', Jar) {
	def libName = "reflect-core"
	archiveFileName = "$rootDir/assets/libs/${libName}.jar"

	def libProject = "$rootDir/../localLib/$libName"
	def libsDir = new File("$libProject/build/libs")

	from(zipTree("$libsDir/$libName-desktop.jar")) {
		exclude "classes.dex"
//		exclude "mod.hjson"
		exclude "META-INF/META-INF.MF"
	}
	from(zipTree("$libsDir/$libName-dx.jar")) {
		include "**"
	}
}

task playAndroid {
	dependsOn ZCompileAll

	def adb = "F:/files/java/sdk/platform-tools/adb"
	def pkg = "com.github.tinylake.mindustryX" // io.anuke.mindustry
	def MDT_ANDROID_DIR =
			"/storage/emulated/0/Android/data/$pkg/files"

	def buildDir = buildDir0
	def fileName = "$archivesBaseName[$version].jar"
	doLast {
		("$adb push $buildDir/libs/$fileName $MDT_ANDROID_DIR/mods/$fileName")
				.execute().waitForProcessOutput(System.out, System.err)

		Thread.sleep(100)
		"$adb shell am start -n $pkg/mindustry.android.AndroidLauncher -W -S"
				.execute().waitForProcessOutput(System.out, System.err)
		Thread.sleep(100)
//		"$adb "

		if (false) {
			"$adb push $project.rootDir/appendLog.sh $MDT_ANDROID_DIR/appendLog.sh"
					.execute().waitForProcessOutput(System.out, System.err)
			"$adb shell sh ${MDT_ANDROID_DIR}/appendLog.sh"
					.execute().waitForProcessOutput(System.out, System.err)
		}
	}
}