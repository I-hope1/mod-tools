apply plugin: "java"

group 'mod-tools'
version '1.4.5.3'

static def export(CompileOptions options) {
//    options.compilerArgs.addAll("-Xlint:deprecation")
	options.compilerArgs.addAll("-AtargetVersion=8")
	// 只是访问
	options.compilerArgs.addAll([
			"java.base/jdk.internal.misc",
			"java.base/jdk.internal.access",
			// ---------------
			"jdk.compiler/com.sun.tools.javac.api",
			"jdk.compiler/com.sun.tools.javac.comp",
			"jdk.compiler/com.sun.tools.javac.code",
			"jdk.compiler/com.sun.tools.javac.tree",
			"jdk.compiler/com.sun.tools.javac.main",
			"jdk.compiler/com.sun.tools.javac.model",
			"jdk.compiler/com.sun.tools.javac.jvm",
			"jdk.compiler/com.sun.tools.javac.parser",
			"jdk.compiler/com.sun.tools.javac.processing",
			"jdk.compiler/com.sun.tools.javac.util",
			"jdk.compiler/com.sun.tools.javac.resources",
			"java.base/sun.reflect.annotation",
			"java.base/jdk.internal.module",
			"jdk.jfr/jdk.jfr.internal",
	].collectMany { ["--add-exports", "$it=ALL-UNNAMED"] })
//	println options.compilerArgs.join(" ")
}

ext {
	uncVersion = '1.8.9'
	mindustryVersion = 'v146'

	minApi = 26
	MdtDataDir = 'E:/Users/ASUS/Desktop/Mindustry136'
	sdkRoot = System.getenv("ANDROID_HOME")
	compilerJar = "$rootDir/_libs/compiler.jar"
}
allprojects {
	ext {
		buildDir0 = layout.buildDirectory.getAsFile().get()
	}
	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
		sourceCompatibility = 21
		targetCompatibility = 21
		export(options)
	}
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url 'https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository' }
		maven { url 'https://www.jitpack.io' }
	}
}

tasks.withType(JavaCompile) {
	options.compilerArgs.add("--enable-preview")
//	options.compilerArgs.add("-verbose")
}

sourceSets.main.java.srcDirs = ["src"]

//force arc version
configurations.configureEach {
	resolutionStrategy.eachDependency { details ->
		if (details.requested.group == 'com.github.Anuken.Arc') details.useVersion "$mindustryVersion"
	}
}

dependencies {
	compileOnly project(":annotations")
	annotationProcessor project(":compiler")

//	def sdkRoot = System.getenv("ANDROID_HOME")
//	println "AndroidHome: $sdkRoot"
//	def platformRoot = new File("$sdkRoot/platforms").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }
	if (new File("${MdtDataDir}/Mindustry_desktop.jar").exists())
		compileOnly files("${MdtDataDir}/Mindustry_desktop.jar")
	compileOnly files(
			"_libs/Mindustry_android.jar",
			"assets/libs/reflect-core.jar",
			"trash/procyon-0.6.jar",
			"_libs/Android_dalvik-1.0.jar",
	)
	implementation files(
			"_libs/AndroidField.jar",
	)
	compileOnly("com.github.Anuken.Mindustry:core:$mindustryVersion") {
		exclude module: "flabel"
	}
	compileOnly("com.github.Anuken.Arc:arc-core:$mindustryVersion")
}

task jarAndroid {
	dependsOn "jar"

	doLast {
		if (!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

		def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

		if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

		//collect dependencies needed for desugaring
		def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

		def d8 = new File("$sdkRoot/build-tools/").listFiles().find {
			it.listFiles().any { it.name.contains("d8") } && Integer.valueOf(it.name.substring(0, 2)) >= minApi
		}.listFiles().find { it.name.contains("d8") }
		//dex and desugar files - this requires d8 in your PATH
		"$d8 $dependencies --min-api 26 --output ${project.archivesBaseName}-android.jar ${project.archivesBaseName}-${version}.jar"
				.execute(null, new File("$buildDir0/libs")).waitForProcessOutput(System.out, System.err)
	}
}

jar {
	archiveFileName = "${project.archivesBaseName}-${version}.jar"

	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}

	from(rootDir) {
		include "mod.hjson"
	}

	from("assets/") {
		include "**"
	}
}

task playGame(type: JavaExec) {
	dependsOn classes
	dependsOn jar

	println "buildDir: $buildDir0; version: $version"
	doFirst {
		copy {
			from "$buildDir0/libs"
			into "${MdtDataDir}/mods"
			include "$archivesBaseName-${version}.jar"
			rename { oldName -> "$project.group-${version}.jar" }
		}
	}
	//运行游戏目录
	classpath(MdtDataDir + "/Mindustry.jar")
	args = [
//	        '-testMobile'
	]
	jvmArgs = [
			'-XX:+UseParallelGC',
//			'-DsocksProxyHost=127.0.0.1',
//			'-DsocksProxyPort=1080',
//			'-DsocksNonProxyHosts="localhost|127.0.0.1"'
	]
}
task ZCompileAll(type: Jar) {
	dependsOn jarAndroid

	from("$buildDir0/libs") {
		include "$project.group-${version}.jar"
		include "$project.group-android.jar"
	}
	archiveFileName = "$buildDir0/libs/$project.group[$version].jar"
}

tasks.register('mergeLibs', Jar) {
	def libName = "reflect-core"
	archiveFileName = "$rootDir/assets/libs/${libName}.jar"

	def libProject = "$rootDir/../localLib/$libName"
	def libsDir = new File("$libProject/build/libs")

	from(zipTree("$libsDir/$libName-desktop.jar")) {
		exclude "classes.dex"
//		exclude "mod.hjson"
		exclude "META-INF/META-INF.MF"
	}
	from(zipTree("$libsDir/$libName-dx.jar")) {
		include "**"
	}
}

task playAndroid {
	dependsOn ZCompileAll

	def adb = "F:/files/java/sdk/platform-tools/adb"
	def MDT_ANDROID_DIR = "/storage/emulated/0/Android/data/io.anuke.mindustry/files"

	def buildDir = buildDir0
	def fileName = "$archivesBaseName-[$version].jar"
	doLast {
		("$adb push $buildDir/libs/$fileName $MDT_ANDROID_DIR/mods/")
				.execute().waitForProcessOutput(System.out, System.err)

		"$adb push $project.rootDir/appendLog.sh $MDT_ANDROID_DIR/appendLog.sh"
				.execute().waitForProcessOutput(System.out, System.err)
		"$adb shell am start -n io.anuke.mindustry/mindustry.android.AndroidLauncher -W -S"
				.execute().waitForProcessOutput(System.out, System.err)
		Thread.sleep(100)
		"$adb shell sh ${MDT_ANDROID_DIR}/appendLog.sh"
				.execute().waitForProcessOutput(System.out, System.err)
	}
}