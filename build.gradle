plugins {
	id 'java'
	id "io.github.liplum.mgpp" version "1.3.2"
}
group 'mod-tools'
version '1.4.4'

//java.sourceCompatibility = JavaVersion.VERSION_17
//java.targetCompatibility = JavaVersion.VERSION_1_8

def export(compiler) {
	compiler.options.compilerArgs.addAll(new String[]{
			"java.base/jdk.internal.misc",
			"java.base/jdk.internal.loader",
			"java.base/jdk.internal.reflect",
			"java.instrument/sun.instrument",
			// ---------------
			"jdk.compiler/com.sun.tools.javac.api",
			"jdk.compiler/com.sun.tools.javac.code",
			"jdk.compiler/com.sun.tools.javac.parser",
			"jdk.compiler/com.sun.tools.javac.processing",
			"jdk.compiler/com.sun.tools.javac.tree",
			"jdk.compiler/com.sun.tools.javac.util",
			"jdk.compiler/com.sun.tools.javac.comp",
			"jdk.compiler/com.sun.tools.javac.model",
			"jdk.compiler/com.sun.tools.javac.jvm",
			"jdk.compiler/com.sun.tools.javac.main",
			"java.base/sun.reflect.annotation",
			"java.base/jdk.internal.module",
			"jdk.jfr/jdk.jfr.internalD"
	}.collect { "--add-exports=$it=ALL-UNNAMED" })
}

allprojects {
	ext {
		uncVersion = '1.8.9'
//		jabelVersion = '0.9.0'
		mindustryVersion = 'v146'
		MdtDataDir = 'E:/Users/ASUS/Desktop/Mindustry136'
		buildDir0 = layout.buildDirectory.getAsFile().get()
	}
	tasks.withType(JavaCompile).configureEach {
		options.encoding = 'UTF-8'
//		sourceCompatibility = 17
//		targetCompatibility = 17
		sourceCompatibility = 9
		targetCompatibility = 9
		export(it)
	}
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
		maven { url 'https://www.jitpack.io' }
	}
}

sourceSets.main.java.srcDirs = ["src"]

dependencies {
	annotationProcessor "com.github.EB-wilson.UniverseCore:annotations:$uncVersion"
	compileOnly project(":annotations")
	annotationProcessor project(":compiler")

//	def sdkRoot = System.getenv("ANDROID_HOME")
//	println "AndroidHome: $sdkRoot"
//	def platformRoot = new File("$sdkRoot/platforms").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }
	if (new File("${MdtDataDir}/Mindustry_desktop.jar").exists())
		compileOnly files("${MdtDataDir}/Mindustry_desktop.jar")
	compileOnly files(
			"_libs/Mindustry_android.jar",
//			"$platformRoot/android.jar",
			"assets/libs/reflect-core.jar",
			"trash/procyon-0.6.jar",
			"_libs/Android_dalvik-1.0.jar",
	)
	implementation files(
			"_libs/AndroidField.jar",
	)
	compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
	compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
}

mindustry {
	meta << ModMeta(version: version)
	meta.displayName = "mod-tools"
	def name = project.archivesBaseName
	deploy {
		baseName = name
	}
	dexJar {
		options.minApi = '31'
	}
}
mindustryAssets {
	// Set the assets root
	rootAt "$projectDir/assets"
}

tasks.register('playGame', JavaExec) {
	dependsOn classes
	dependsOn jar

	doFirst {
		println "buildDir: $buildDir0; version: $version"
		copy {
			from "$buildDir0/libs"
			into "${MdtDataDir}/mods"
			include "$archivesBaseName-${version}.jar"
			rename { oldName -> "$project.group-${version}.jar" }
		}
	}
	//运行游戏目录
	classpath(MdtDataDir + "/Mindustry.jar")
//	classpath("E:/应用/Mindustry/jre/desktop.jar")
	args = [
//	        '-testMobile'
	]
	jvmArgs = [
			'-Djava.library.path=E:/Users/ASUS/Desktop/Mods/mod-tools136/assets',
			'-DsocksProxyHost=127.0.0.1',
			'-DsocksProxyPort=1080',
			'-DsocksNonProxyHosts="localhost|127.0.0.1"'
	]
}
tasks.register('ZCompileAll', Copy) {
	dependsOn deploy

	from("$buildDir0/tmp/deploy/") {
		include "${rootProject.name}-${version}.jar"
	}
	into("$buildDir0/libs")
	rename { fileName ->
		// a simple way is to remove the "-$version" from the jar filename
		// but you can customize the filename replacement rule as you wish.
		fileName.replace("136-$version", "").replace("-$version", "")
	}
}

tasks.register('mergeLibs', Jar) {
	archiveFileName = "$rootDir/assets/libs/reflect-core.jar"

	def libsDir = new File("$rootDir/libs/build/libs")

	from(zipTree("$libsDir/libs-desktop.jar")) {
		exclude "classes.dex"
//		exclude "mod.hjson"
		exclude "META-INF/META-INF.MF"
	}
	from(zipTree("$libsDir/libs-dx.jar")) {
		include "**"
	}
}

tasks.register('playAndroid') {
	dependsOn deploy

	def adb = "F:/files/java/sdk/platform-tools/adb"
	def MDT_ANDROID_DIR = "/storage/emulated/0/Android/data/io.anuke.mindustry/files"
	doLast {
		("$adb push ${buildDir0}/tmp/deploy/${archivesBaseName}-${version}.jar"
				+ " $MDT_ANDROID_DIR/mods/")
				.execute().waitForProcessOutput(System.out, System.err)

		"$adb push ${project.rootDir}/appendLog.sh ${MDT_ANDROID_DIR}/appendLog.sh"
				.execute().waitForProcessOutput(System.out, System.err)
		"$adb shell am start -n io.anuke.mindustry/mindustry.android.AndroidLauncher -W -S"
				.execute().waitForProcessOutput(System.out, System.err)
		Thread.sleep(100)
		"$adb shell sh ${MDT_ANDROID_DIR}/appendLog.sh"
				.execute().waitForProcessOutput(System.out, System.err)
	}
}
