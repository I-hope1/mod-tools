plugins {
	id 'java'
	id "io.github.liplum.mgpp" version "1.2.0"
}


allprojects {
	ext {
		uncVersion = "1.8.5"
		mindustryVersion = 'v145.1'
	}
	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
//		targetCompatibility = 17
//		sourceCompatibility = 17
		targetCompatibility = 9
		sourceCompatibility = 9
		options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.misc=ALL-UNNAMED")
		options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.loader=ALL-UNNAMED")
		options.compilerArgs.addAll("--add-exports", "java.base/jdk.internal.reflect=ALL-UNNAMED")
	}
}

group 'org.example'
version '1.0'
sourceSets.main.java.srcDirs = ["src"]
repositories {
	mavenCentral()
	mavenLocal()
	maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
	maven { url 'https://www.jitpack.io' }
//	mindustryRepo()
}
def MdtDataDir = "E:/Users/ASUS/Desktop/Mindustry136"
def VERSION = "1.4.3.1"

dependencies {
	annotationProcessor "com.github.EB-wilson.UniverseCore:annotations:$uncVersion"
	annotationProcessor project(":compiler")
	compileOnly project(":annotations")

	compileOnly files(
			"F:/files/mindustry/a/mdt-ac-1.0.jar",
			"_libs/Mindustry_android.jar",
			"${MdtDataDir}/Mindustry_desktop.jar",
			"E:/Program Files/AndroidStudio/sdk/platforms/android-32/android.jar",
			"assets/libs/reflect-core.jar",
			"trash/procyon-0.6.jar",
			"_libs/Android_dalvik-1.0.jar",
	)
	implementation files(
			"_libs/AndroidField.jar",
	)
	compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
	compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
}


mindustry {
	dependency {}
	client {}
	meta << ModMeta(
			version: VERSION
	)
	meta.displayName = "mod-tools"
	def name = project.archivesBaseName
	deploy {
		baseName = name
	}
	dexJar {
		options.minApi = '31'
	}
}
mindustryAssets {
	// Set the assets root
	rootAt "$projectDir/assets"
}

import arc.files.Fi
import arc.util.Log

task playGame(dependsOn: classes, type: JavaExec) {
	dependsOn jar

	doFirst {
		Log.info("$buildDir")
		/* 复制文件到mods目录 */
		def modFi = project.archivesBaseName + "-" + VERSION + ".jar"
		def buildDir = new Fi("" + buildDir).child("libs")
		def from = buildDir.child(project.archivesBaseName + "-1.0.jar");
		if (from.exists()) from.copyTo(buildDir.child(modFi))
		buildDir.child(modFi).copyTo(new Fi(MdtDataDir).child("mods").child(modFi))
	}
	//运行游戏目录
	main = "-jar"
	args = [
			MdtDataDir + "/Mindustry.jar",
//			"-antialias"
//			, "-debug"
	]
}
task ZComplieAll {
	dependsOn deploy
}

task mergeLibs(type: Jar) {
	archiveFileName = "$rootDir/assets/libs/reflect-core.jar"

	def libsDir = new File("$rootDir/libs/build/libs")

	from(zipTree("$libsDir/libs-desktop.jar")) {
		exclude "classes.dex"
//		exclude "mod.hjson"
		exclude "META-INF/META-INF.MF"
	}
	from(zipTree("$libsDir/libs-dx.jar")) {
		include "**"
	}
}

task playAndroid {
	dependsOn deploy

	def adb = "F:/files/java/sdk/platform-tools/adb"
	def MDT_ANDROID_DIR = "/sdcard/Android/data/io.anuke.mindustry/files";
	doLast {
		("$adb push ${buildDir}/tmp/deploy/${project.archivesBaseName}-${VERSION}.jar"
				+ " $MDT_ANDROID_DIR/mods/")
				.execute().waitForProcessOutput(System.out, System.err)

		/*def MindustryLogPath = "${MDT_ANDROID_DIR}/last_log.txt"
		new Fi("${project.rootDir}\\appendLog.sh")
				.writeString("""
#!/bin/sh
# MADE By BING
# 获取文件的初始修改时间
old_time=-1
# 循环检查文件的修改时间
while true; do
  # 获取文件的当前修改时间
  new_time=\$(stat -c %y ${MindustryLogPath})
  # 如果修改时间发生变化
  if [ "\$new_time" != "\$old_time" ]; then
    # 将文件的内容追加到控制台
    tail -f ${MindustryLogPath}
    # 更新修改时间
    old_time=\$new_time
  fi
  # 等待一段时间（秒）
  sleep 0.05
done""")*/
		"$adb push ${project.rootDir}/appendLog.sh ${MDT_ANDROID_DIR}/appendLog.sh"
				.execute().waitForProcessOutput(System.out, System.err)
		"$adb shell am start -n io.anuke.mindustry/mindustry.android.AndroidLauncher -D -W -S"
				.execute().waitForProcessOutput(System.out, System.err)
		"$adb shell sh ${MDT_ANDROID_DIR}/appendLog.sh"
				.execute().waitForProcessOutput(System.out, System.err)
	}
}

